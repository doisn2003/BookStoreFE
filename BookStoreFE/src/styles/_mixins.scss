@use 'sass:map';
@use 'variables' as vars;

@mixin mobile {
  @media (max-width: vars.$mobile) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: vars.$tablet) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: vars.$desktop) {
    @content;
  }
}

// media queries
@mixin breakpoint($point) {
  @if map.has-key(vars.$breakpoints, $point) {
    @media (min-width: map.get(vars.$breakpoints, $point)) {
      @content;
    }
  }
}

// typo
@mixin font-size($size) {
  @if map.has-key(vars.$font-sizes, $size) {
    font-size: map.get(vars.$font-sizes, $size);
  }
}

@mixin font-weight($weight) {
  @if map.has-key(vars.$font-weights, $weight) {
    font-weight: map.get(vars.$font-weights, $weight);
  }
}

// colors
@function get-color($color, $shade: 'base') {
  @if map.has-key(vars.$colors, $color) {
    $color-map: map.get(vars.$colors, $color);
    @if map.has-key($color-map, $shade) {
      @return map.get($color-map, $shade);
    }
  }
  @return null;
}

@mixin color-variant($color, $shade: 'base') {
  color: get-color($color, $shade);
}

@mixin bg-variant($color, $shade: 'base') {
  background-color: get-color($color, $shade);
}

// spacing
@mixin padding($size) {
  @if map.has-key(vars.$spacing, $size) {
    padding: map.get(vars.$spacing, $size);
  }
}

@mixin margin($size) {
  @if map.has-key(vars.$spacing, $size) {
    margin: map.get(vars.$spacing, $size);
  }
}

// flexbox
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// grid
@mixin grid-columns($cols) {
  display: grid;
  grid-template-columns: repeat($cols, 1fr);
}

// shadows
@mixin shadow($size: 'base') {
  @if map.has-key(vars.$shadows, $size) {
    box-shadow: map.get(vars.$shadows, $size);
  }
}

// transitions
@mixin transition($type: 'base') {
  @if map.has-key(vars.$transitions, $type) {
    transition: map.get(vars.$transitions, $type);
  }
}

// truncate text
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// hover eff
@mixin hover {
  @media (hover: hover) {
    &:hover {
      @content;
    }
  }
}

// focus styles
@mixin focus-ring {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(get-color('primary'), 0.4);
  }
}

// responsive container
@mixin container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: map.get(vars.$spacing, '4');
  padding-left: map.get(vars.$spacing, '4');

  @include breakpoint('sm') {
    max-width: map.get(vars.$breakpoints, 'sm');
  }
  @include breakpoint('md') {
    max-width: map.get(vars.$breakpoints, 'md');
  }
  @include breakpoint('lg') {
    max-width: map.get(vars.$breakpoints, 'lg');
  }
  @include breakpoint('xl') {
    max-width: map.get(vars.$breakpoints, 'xl');
  }
  @include breakpoint('2xl') {
    max-width: map.get(vars.$breakpoints, '2xl');
  }
}

// aspect ratios
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    content: '';
    display: block;
    padding-top: ($height / $width) * 100%;
  }
}

// scrollbar styling
@mixin custom-scrollbar {
  &::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  
  &::-webkit-scrollbar-track {
    background: get-color('gray', '100');
  }
  
  &::-webkit-scrollbar-thumb {
    background: get-color('gray', '300');
    border-radius: map.get(vars.$border-radius, 'full');
    
    &:hover {
      background: get-color('gray', '400');
    }
  }
} 